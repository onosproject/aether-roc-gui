// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { Application } from '../models/application';
import { ApplicationEndpoint } from '../models/application-endpoint';
import { ApplicationEndpointMbr } from '../models/application-endpoint-mbr';
import { Site } from '../models/site';
import { SiteConnectivityService } from '../models/site-connectivity-service';
import { SiteConnectivityServiceCore4G } from '../models/site-connectivity-service-core-4-g';
import { SiteConnectivityServiceCore5G } from '../models/site-connectivity-service-core-5-g';
import { SiteDevice } from '../models/site-device';
import { SiteDeviceGroup } from '../models/site-device-group';
import { SiteDeviceGroupDevice } from '../models/site-device-group-device';
import { SiteDeviceGroupMbr } from '../models/site-device-group-mbr';
import { SiteDeviceState } from '../models/site-device-state';
import { SiteImsiDefinition } from '../models/site-imsi-definition';
import { SiteIpDomain } from '../models/site-ip-domain';
import { SiteMonitoring } from '../models/site-monitoring';
import { SiteMonitoringEdgeDevice } from '../models/site-monitoring-edge-device';
import { SiteSimCard } from '../models/site-sim-card';
import { SiteSlice } from '../models/site-slice';
import { SiteSliceDeviceGroup } from '../models/site-slice-device-group';
import { SiteSliceFilter } from '../models/site-slice-filter';
import { SiteSliceMbr } from '../models/site-slice-mbr';
import { SiteSlicePriorityTrafficRule } from '../models/site-slice-priority-traffic-rule';
import { SiteSmallCell } from '../models/site-small-cell';
import { SiteUpf } from '../models/site-upf';
import { Template } from '../models/template';
import { TemplateMbr } from '../models/template-mbr';
import { TrafficClass } from '../models/traffic-class';

@Injectable({
  providedIn: 'root',
})
export class ContainerService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getApplication
   */
  static readonly GetApplicationPath = '/aether/v2.1.x/{enterprise-id}/application/{application-id}';

  /**
   * GET /application Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplication()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplication$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;
  }): Observable<StrictHttpResponse<Application>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetApplicationPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('application-id', params['application-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<Application>;
      })
    );
  }

  /**
   * GET /application Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getApplication$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplication(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;
  }): Observable<Application> {

    return this.getApplication$Response(params).pipe(
      map((r: StrictHttpResponse<Application>) => r.body as Application)
    );
  }

  /**
   * Path part for operation getApplicationEndpoint
   */
  static readonly GetApplicationEndpointPath = '/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}';

  /**
   * GET /application/{application-id}/endpoint Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplicationEndpoint()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationEndpoint$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;

    /**
     * key {endpoint-id}
     */
    'endpoint-id': any;
  }): Observable<StrictHttpResponse<ApplicationEndpoint>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetApplicationEndpointPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('application-id', params['application-id'], {});
      rb.path('endpoint-id', params['endpoint-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<ApplicationEndpoint>;
      })
    );
  }

  /**
   * GET /application/{application-id}/endpoint Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getApplicationEndpoint$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationEndpoint(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;

    /**
     * key {endpoint-id}
     */
    'endpoint-id': any;
  }): Observable<ApplicationEndpoint> {

    return this.getApplicationEndpoint$Response(params).pipe(
      map((r: StrictHttpResponse<ApplicationEndpoint>) => r.body as ApplicationEndpoint)
    );
  }

  /**
   * Path part for operation getApplicationEndpointMbr
   */
  static readonly GetApplicationEndpointMbrPath = '/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr';

  /**
   * GET /application/{application-id}/endpoint/{endpoint-id}/mbr Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplicationEndpointMbr()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationEndpointMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;

    /**
     * key {endpoint-id}
     */
    'endpoint-id': any;
  }): Observable<StrictHttpResponse<ApplicationEndpointMbr>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetApplicationEndpointMbrPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('application-id', params['application-id'], {});
      rb.path('endpoint-id', params['endpoint-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<ApplicationEndpointMbr>;
      })
    );
  }

  /**
   * GET /application/{application-id}/endpoint/{endpoint-id}/mbr Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getApplicationEndpointMbr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationEndpointMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;

    /**
     * key {endpoint-id}
     */
    'endpoint-id': any;
  }): Observable<ApplicationEndpointMbr> {

    return this.getApplicationEndpointMbr$Response(params).pipe(
      map((r: StrictHttpResponse<ApplicationEndpointMbr>) => r.body as ApplicationEndpointMbr)
    );
  }

  /**
   * Path part for operation getSite
   */
  static readonly GetSitePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}';

  /**
   * GET /site Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSite()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSite$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<Site>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSitePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<Site>;
      })
    );
  }

  /**
   * GET /site Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSite$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSite(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<Site> {

    return this.getSite$Response(params).pipe(
      map((r: StrictHttpResponse<Site>) => r.body as Site)
    );
  }

  /**
   * Path part for operation getSiteConnectivityService
   */
  static readonly GetSiteConnectivityServicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service';

  /**
   * GET /site/{site-id}/connectivity-service Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteConnectivityService()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityService$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteConnectivityService>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteConnectivityServicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteConnectivityService>;
      })
    );
  }

  /**
   * GET /site/{site-id}/connectivity-service Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteConnectivityService$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityService(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteConnectivityService> {

    return this.getSiteConnectivityService$Response(params).pipe(
      map((r: StrictHttpResponse<SiteConnectivityService>) => r.body as SiteConnectivityService)
    );
  }

  /**
   * Path part for operation getSiteConnectivityServiceCore4G
   */
  static readonly GetSiteConnectivityServiceCore4GPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g';

  /**
   * GET /site/{site-id}/connectivity-service/core-4g Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteConnectivityServiceCore4G()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityServiceCore4G$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteConnectivityServiceCore4G>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteConnectivityServiceCore4GPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteConnectivityServiceCore4G>;
      })
    );
  }

  /**
   * GET /site/{site-id}/connectivity-service/core-4g Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteConnectivityServiceCore4G$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityServiceCore4G(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteConnectivityServiceCore4G> {

    return this.getSiteConnectivityServiceCore4G$Response(params).pipe(
      map((r: StrictHttpResponse<SiteConnectivityServiceCore4G>) => r.body as SiteConnectivityServiceCore4G)
    );
  }

  /**
   * Path part for operation getSiteConnectivityServiceCore5G
   */
  static readonly GetSiteConnectivityServiceCore5GPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g';

  /**
   * GET /site/{site-id}/connectivity-service/core-5g Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteConnectivityServiceCore5G()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityServiceCore5G$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteConnectivityServiceCore5G>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteConnectivityServiceCore5GPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteConnectivityServiceCore5G>;
      })
    );
  }

  /**
   * GET /site/{site-id}/connectivity-service/core-5g Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteConnectivityServiceCore5G$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityServiceCore5G(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteConnectivityServiceCore5G> {

    return this.getSiteConnectivityServiceCore5G$Response(params).pipe(
      map((r: StrictHttpResponse<SiteConnectivityServiceCore5G>) => r.body as SiteConnectivityServiceCore5G)
    );
  }

  /**
   * Path part for operation getSiteDeviceGroup
   */
  static readonly GetSiteDeviceGroupPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}';

  /**
   * GET /site/{site-id}/device-group Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroup()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroup$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroup>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteDeviceGroupPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroup>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroup$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroup(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<SiteDeviceGroup> {

    return this.getSiteDeviceGroup$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroup>) => r.body as SiteDeviceGroup)
    );
  }

  /**
   * Path part for operation getSiteDeviceGroupDevice
   */
  static readonly GetSiteDeviceGroupDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}';

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroupDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroupDevice>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteDeviceGroupDevicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroupDevice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroupDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<SiteDeviceGroupDevice> {

    return this.getSiteDeviceGroupDevice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroupDevice>) => r.body as SiteDeviceGroupDevice)
    );
  }

  /**
   * Path part for operation getSiteDeviceGroupMbr
   */
  static readonly GetSiteDeviceGroupMbrPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr';

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/mbr Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroupMbr()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroupMbr>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteDeviceGroupMbrPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroupMbr>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/mbr Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroupMbr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<SiteDeviceGroupMbr> {

    return this.getSiteDeviceGroupMbr$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroupMbr>) => r.body as SiteDeviceGroupMbr)
    );
  }

  /**
   * Path part for operation getSiteDevice
   */
  static readonly GetSiteDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}';

  /**
   * GET /site/{site-id}/device Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<SiteDevice>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteDevicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDevice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<SiteDevice> {

    return this.getSiteDevice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDevice>) => r.body as SiteDevice)
    );
  }

  /**
   * Path part for operation getSiteDeviceState
   */
  static readonly GetSiteDeviceStatePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}/state';

  /**
   * GET /site/{site-id}/device/{device-id}/state Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceState()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceState$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceState>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteDeviceStatePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceState>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device/{device-id}/state Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceState$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceState(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<SiteDeviceState> {

    return this.getSiteDeviceState$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceState>) => r.body as SiteDeviceState)
    );
  }

  /**
   * Path part for operation getSiteImsiDefinition
   */
  static readonly GetSiteImsiDefinitionPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition';

  /**
   * GET /site/{site-id}/imsi-definition Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteImsiDefinition()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteImsiDefinition$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteImsiDefinition>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteImsiDefinitionPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteImsiDefinition>;
      })
    );
  }

  /**
   * GET /site/{site-id}/imsi-definition Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteImsiDefinition$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteImsiDefinition(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteImsiDefinition> {

    return this.getSiteImsiDefinition$Response(params).pipe(
      map((r: StrictHttpResponse<SiteImsiDefinition>) => r.body as SiteImsiDefinition)
    );
  }

  /**
   * Path part for operation getSiteIpDomain
   */
  static readonly GetSiteIpDomainPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}';

  /**
   * GET /site/{site-id}/ip-domain Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteIpDomain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteIpDomain$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {ip-domain-id}
     */
    'ip-domain-id': any;
  }): Observable<StrictHttpResponse<SiteIpDomain>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteIpDomainPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('ip-domain-id', params['ip-domain-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteIpDomain>;
      })
    );
  }

  /**
   * GET /site/{site-id}/ip-domain Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteIpDomain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteIpDomain(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {ip-domain-id}
     */
    'ip-domain-id': any;
  }): Observable<SiteIpDomain> {

    return this.getSiteIpDomain$Response(params).pipe(
      map((r: StrictHttpResponse<SiteIpDomain>) => r.body as SiteIpDomain)
    );
  }

  /**
   * Path part for operation getSiteMonitoring
   */
  static readonly GetSiteMonitoringPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring';

  /**
   * GET /site/{site-id}/monitoring Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteMonitoring()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoring$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteMonitoring>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteMonitoringPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteMonitoring>;
      })
    );
  }

  /**
   * GET /site/{site-id}/monitoring Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteMonitoring$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoring(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteMonitoring> {

    return this.getSiteMonitoring$Response(params).pipe(
      map((r: StrictHttpResponse<SiteMonitoring>) => r.body as SiteMonitoring)
    );
  }

  /**
   * Path part for operation getSiteMonitoringEdgeDevice
   */
  static readonly GetSiteMonitoringEdgeDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}';

  /**
   * GET /site/{site-id}/monitoring/edge-device Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteMonitoringEdgeDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoringEdgeDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {edge-device-id}
     */
    'edge-device-id': any;
  }): Observable<StrictHttpResponse<SiteMonitoringEdgeDevice>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteMonitoringEdgeDevicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('edge-device-id', params['edge-device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteMonitoringEdgeDevice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/monitoring/edge-device Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteMonitoringEdgeDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoringEdgeDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {edge-device-id}
     */
    'edge-device-id': any;
  }): Observable<SiteMonitoringEdgeDevice> {

    return this.getSiteMonitoringEdgeDevice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteMonitoringEdgeDevice>) => r.body as SiteMonitoringEdgeDevice)
    );
  }

  /**
   * Path part for operation getSiteSimCard
   */
  static readonly GetSiteSimCardPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}';

  /**
   * GET /site/{site-id}/sim-card Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSimCard()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSimCard$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {sim-id}
     */
    'sim-id': any;
  }): Observable<StrictHttpResponse<SiteSimCard>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSimCardPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('sim-id', params['sim-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSimCard>;
      })
    );
  }

  /**
   * GET /site/{site-id}/sim-card Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSimCard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSimCard(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {sim-id}
     */
    'sim-id': any;
  }): Observable<SiteSimCard> {

    return this.getSiteSimCard$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSimCard>) => r.body as SiteSimCard)
    );
  }

  /**
   * Path part for operation getSiteSlice
   */
  static readonly GetSiteSlicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}';

  /**
   * GET /site/{site-id}/slice Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSlice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSlice>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSlicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSlice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSlice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSlice> {

    return this.getSiteSlice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSlice>) => r.body as SiteSlice)
    );
  }

  /**
   * Path part for operation getSiteSliceDeviceGroup
   */
  static readonly GetSiteSliceDeviceGroupPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}';

  /**
   * GET /site/{site-id}/slice/{slice-id}/device-group Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceDeviceGroup()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceDeviceGroup$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;

    /**
     * key {device-group}
     */
    'device-group': any;
  }): Observable<StrictHttpResponse<SiteSliceDeviceGroup>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSliceDeviceGroupPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
      rb.path('device-group', params['device-group'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceDeviceGroup>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/device-group Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceDeviceGroup$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceDeviceGroup(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;

    /**
     * key {device-group}
     */
    'device-group': any;
  }): Observable<SiteSliceDeviceGroup> {

    return this.getSiteSliceDeviceGroup$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceDeviceGroup>) => r.body as SiteSliceDeviceGroup)
    );
  }

  /**
   * Path part for operation getSiteSliceFilter
   */
  static readonly GetSiteSliceFilterPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}';

  /**
   * GET /site/{site-id}/slice/{slice-id}/filter Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceFilter()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceFilter$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;

    /**
     * key {application}
     */
    application: any;
  }): Observable<StrictHttpResponse<SiteSliceFilter>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSliceFilterPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
      rb.path('application', params.application, {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceFilter>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/filter Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceFilter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceFilter(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;

    /**
     * key {application}
     */
    application: any;
  }): Observable<SiteSliceFilter> {

    return this.getSiteSliceFilter$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceFilter>) => r.body as SiteSliceFilter)
    );
  }

  /**
   * Path part for operation getSiteSliceMbr
   */
  static readonly GetSiteSliceMbrPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr';

  /**
   * GET /site/{site-id}/slice/{slice-id}/mbr Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceMbr()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSliceMbr>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSliceMbrPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceMbr>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/mbr Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceMbr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSliceMbr> {

    return this.getSiteSliceMbr$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceMbr>) => r.body as SiteSliceMbr)
    );
  }

  /**
   * Path part for operation getSiteSlicePriorityTrafficRule
   */
  static readonly GetSiteSlicePriorityTrafficRulePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}';

  /**
   * GET /site/{site-id}/slice/{slice-id}/priority-traffic-rule Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSlicePriorityTrafficRule()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlicePriorityTrafficRule$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;

    /**
     * key {priority-traffic-rule-id}
     */
    'priority-traffic-rule-id': any;
  }): Observable<StrictHttpResponse<SiteSlicePriorityTrafficRule>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSlicePriorityTrafficRulePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
      rb.path('priority-traffic-rule-id', params['priority-traffic-rule-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSlicePriorityTrafficRule>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/priority-traffic-rule Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSlicePriorityTrafficRule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlicePriorityTrafficRule(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;

    /**
     * key {priority-traffic-rule-id}
     */
    'priority-traffic-rule-id': any;
  }): Observable<SiteSlicePriorityTrafficRule> {

    return this.getSiteSlicePriorityTrafficRule$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSlicePriorityTrafficRule>) => r.body as SiteSlicePriorityTrafficRule)
    );
  }

  /**
   * Path part for operation getSiteSmallCell
   */
  static readonly GetSiteSmallCellPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}';

  /**
   * GET /site/{site-id}/small-cell Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSmallCell()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSmallCell$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {small-cell-id}
     */
    'small-cell-id': any;
  }): Observable<StrictHttpResponse<SiteSmallCell>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteSmallCellPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('small-cell-id', params['small-cell-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSmallCell>;
      })
    );
  }

  /**
   * GET /site/{site-id}/small-cell Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSmallCell$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSmallCell(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {small-cell-id}
     */
    'small-cell-id': any;
  }): Observable<SiteSmallCell> {

    return this.getSiteSmallCell$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSmallCell>) => r.body as SiteSmallCell)
    );
  }

  /**
   * Path part for operation getSiteUpf
   */
  static readonly GetSiteUpfPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}';

  /**
   * GET /site/{site-id}/upf Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteUpf()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteUpf$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {upf-id}
     */
    'upf-id': any;
  }): Observable<StrictHttpResponse<SiteUpf>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetSiteUpfPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('upf-id', params['upf-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteUpf>;
      })
    );
  }

  /**
   * GET /site/{site-id}/upf Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteUpf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteUpf(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {upf-id}
     */
    'upf-id': any;
  }): Observable<SiteUpf> {

    return this.getSiteUpf$Response(params).pipe(
      map((r: StrictHttpResponse<SiteUpf>) => r.body as SiteUpf)
    );
  }

  /**
   * Path part for operation getTemplate
   */
  static readonly GetTemplatePath = '/aether/v2.1.x/{enterprise-id}/template/{template-id}';

  /**
   * GET /template Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTemplate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTemplate$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {template-id}
     */
    'template-id': any;
  }): Observable<StrictHttpResponse<Template>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetTemplatePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('template-id', params['template-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<Template>;
      })
    );
  }

  /**
   * GET /template Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTemplate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTemplate(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {template-id}
     */
    'template-id': any;
  }): Observable<Template> {

    return this.getTemplate$Response(params).pipe(
      map((r: StrictHttpResponse<Template>) => r.body as Template)
    );
  }

  /**
   * Path part for operation getTemplateMbr
   */
  static readonly GetTemplateMbrPath = '/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr';

  /**
   * GET /template/{template-id}/mbr Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTemplateMbr()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTemplateMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {template-id}
     */
    'template-id': any;
  }): Observable<StrictHttpResponse<TemplateMbr>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetTemplateMbrPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('template-id', params['template-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<TemplateMbr>;
      })
    );
  }

  /**
   * GET /template/{template-id}/mbr Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTemplateMbr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTemplateMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {template-id}
     */
    'template-id': any;
  }): Observable<TemplateMbr> {

    return this.getTemplateMbr$Response(params).pipe(
      map((r: StrictHttpResponse<TemplateMbr>) => r.body as TemplateMbr)
    );
  }

  /**
   * Path part for operation getTrafficClass
   */
  static readonly GetTrafficClassPath = '/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}';

  /**
   * GET /traffic-class Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrafficClass()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClass$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
  }): Observable<StrictHttpResponse<TrafficClass>> {

    const rb = new RequestBuilder(this.rootUrl, ContainerService.GetTrafficClassPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('traffic-class-id', params['traffic-class-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<TrafficClass>;
      })
    );
  }

  /**
   * GET /traffic-class Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTrafficClass$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClass(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
  }): Observable<TrafficClass> {

    return this.getTrafficClass$Response(params).pipe(
      map((r: StrictHttpResponse<TrafficClass>) => r.body as TrafficClass)
    );
  }

}
