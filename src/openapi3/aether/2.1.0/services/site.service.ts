// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { Site } from '../models/site';
import { SiteConnectivityService } from '../models/site-connectivity-service';
import { SiteImsiDefinition } from '../models/site-imsi-definition';
import { SiteList } from '../models/site-list';
import { SiteMonitoring } from '../models/site-monitoring';

@Injectable({
  providedIn: 'root',
})
export class SiteService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getSiteList
   */
  static readonly GetSiteListPath = '/aether/v2.1.x/{enterprise-id}/site';

  /**
   * GET /site List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<StrictHttpResponse<SiteList>> {

    const rb = new RequestBuilder(this.rootUrl, SiteService.GetSiteListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteList>;
      })
    );
  }

  /**
   * GET /site List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<SiteList> {

    return this.getSiteList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteList>) => r.body as SiteList)
    );
  }

  /**
   * Path part for operation getSite
   */
  static readonly GetSitePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}';

  /**
   * GET /site Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSite()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSite$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<Site>> {

    const rb = new RequestBuilder(this.rootUrl, SiteService.GetSitePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<Site>;
      })
    );
  }

  /**
   * GET /site Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSite$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSite(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<Site> {

    return this.getSite$Response(params).pipe(
      map((r: StrictHttpResponse<Site>) => r.body as Site)
    );
  }

  /**
   * Path part for operation getSiteConnectivityService
   */
  static readonly GetSiteConnectivityServicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service';

  /**
   * GET /site/{site-id}/connectivity-service Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteConnectivityService()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityService$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteConnectivityService>> {

    const rb = new RequestBuilder(this.rootUrl, SiteService.GetSiteConnectivityServicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteConnectivityService>;
      })
    );
  }

  /**
   * GET /site/{site-id}/connectivity-service Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteConnectivityService$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteConnectivityService(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteConnectivityService> {

    return this.getSiteConnectivityService$Response(params).pipe(
      map((r: StrictHttpResponse<SiteConnectivityService>) => r.body as SiteConnectivityService)
    );
  }

  /**
   * Path part for operation getSiteImsiDefinition
   */
  static readonly GetSiteImsiDefinitionPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition';

  /**
   * GET /site/{site-id}/imsi-definition Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteImsiDefinition()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteImsiDefinition$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteImsiDefinition>> {

    const rb = new RequestBuilder(this.rootUrl, SiteService.GetSiteImsiDefinitionPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteImsiDefinition>;
      })
    );
  }

  /**
   * GET /site/{site-id}/imsi-definition Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteImsiDefinition$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteImsiDefinition(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteImsiDefinition> {

    return this.getSiteImsiDefinition$Response(params).pipe(
      map((r: StrictHttpResponse<SiteImsiDefinition>) => r.body as SiteImsiDefinition)
    );
  }

  /**
   * Path part for operation getSiteMonitoring
   */
  static readonly GetSiteMonitoringPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring';

  /**
   * GET /site/{site-id}/monitoring Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteMonitoring()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoring$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteMonitoring>> {

    const rb = new RequestBuilder(this.rootUrl, SiteService.GetSiteMonitoringPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteMonitoring>;
      })
    );
  }

  /**
   * GET /site/{site-id}/monitoring Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteMonitoring$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoring(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteMonitoring> {

    return this.getSiteMonitoring$Response(params).pipe(
      map((r: StrictHttpResponse<SiteMonitoring>) => r.body as SiteMonitoring)
    );
  }

}
