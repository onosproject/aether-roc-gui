// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { TrafficClass } from '../models/traffic-class';
import { TrafficClassList } from '../models/traffic-class-list';

@Injectable({
  providedIn: 'root',
})
export class TrafficClassService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getTrafficClassList
   */
  static readonly GetTrafficClassListPath = '/aether/v2.1.x/{enterprise-id}/traffic-class';

  /**
   * GET /traffic-class List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrafficClassList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClassList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<StrictHttpResponse<TrafficClassList>> {

    const rb = new RequestBuilder(this.rootUrl, TrafficClassService.GetTrafficClassListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<TrafficClassList>;
      })
    );
  }

  /**
   * GET /traffic-class List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTrafficClassList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClassList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<TrafficClassList> {

    return this.getTrafficClassList$Response(params).pipe(
      map((r: StrictHttpResponse<TrafficClassList>) => r.body as TrafficClassList)
    );
  }

  /**
   * Path part for operation getTrafficClass
   */
  static readonly GetTrafficClassPath = '/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}';

  /**
   * GET /traffic-class Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrafficClass()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClass$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
  }): Observable<StrictHttpResponse<TrafficClass>> {

    const rb = new RequestBuilder(this.rootUrl, TrafficClassService.GetTrafficClassPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('traffic-class-id', params['traffic-class-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<TrafficClass>;
      })
    );
  }

  /**
   * GET /traffic-class Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTrafficClass$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClass(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
  }): Observable<TrafficClass> {

    return this.getTrafficClass$Response(params).pipe(
      map((r: StrictHttpResponse<TrafficClass>) => r.body as TrafficClass)
    );
  }

  /**
   * Path part for operation postTrafficClass
   */
  static readonly PostTrafficClassPath = '/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}';

  /**
   * POST /traffic-class.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postTrafficClass()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postTrafficClass$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
    body?: TrafficClass
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, TrafficClassService.PostTrafficClassPath, 'post');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('traffic-class-id', params['traffic-class-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /traffic-class.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postTrafficClass$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postTrafficClass(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
    body?: TrafficClass
  }): Observable<void> {

    return this.postTrafficClass$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteTrafficClass
   */
  static readonly DeleteTrafficClassPath = '/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}';

  /**
   * DELETE /traffic-class.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTrafficClass()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTrafficClass$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, TrafficClassService.DeleteTrafficClassPath, 'delete');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('traffic-class-id', params['traffic-class-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /traffic-class.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteTrafficClass$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTrafficClass(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {traffic-class-id}
     */
    'traffic-class-id': any;
  }): Observable<void> {

    return this.deleteTrafficClass$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

}
