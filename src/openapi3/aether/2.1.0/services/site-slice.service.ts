// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { SiteSlice } from '../models/site-slice';
import { SiteSliceList } from '../models/site-slice-list';
import { SiteSliceMbr } from '../models/site-slice-mbr';
import { SiteSliceXapp } from '../models/site-slice-xapp';

@Injectable({
  providedIn: 'root',
})
export class SiteSliceService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getSiteSliceList
   */
  static readonly GetSiteSliceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice';

  /**
   * GET /site/{site-id}/slice List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteSliceList>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.GetSiteSliceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteSliceList> {

    return this.getSiteSliceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceList>) => r.body as SiteSliceList)
    );
  }

  /**
   * Path part for operation getSiteSlice
   */
  static readonly GetSiteSlicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}';

  /**
   * GET /site/{site-id}/slice Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSlice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSlice>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.GetSiteSlicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSlice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSlice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSlice> {

    return this.getSiteSlice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSlice>) => r.body as SiteSlice)
    );
  }

  /**
   * Path part for operation postSiteSlice
   */
  static readonly PostSiteSlicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}';

  /**
   * POST /site/{site-id}/slice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSiteSlice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteSlice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
    body?: SiteSlice
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.PostSiteSlicePath, 'post');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /site/{site-id}/slice.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSiteSlice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteSlice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
    body?: SiteSlice
  }): Observable<void> {

    return this.postSiteSlice$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSiteSlice
   */
  static readonly DeleteSiteSlicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}';

  /**
   * DELETE /site/{site-id}/slice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSiteSlice()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteSlice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.DeleteSiteSlicePath, 'delete');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /site/{site-id}/slice.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSiteSlice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteSlice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<void> {

    return this.deleteSiteSlice$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation getSiteSliceMbr
   */
  static readonly GetSiteSliceMbrPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr';

  /**
   * GET /site/{site-id}/slice/{slice-id}/mbr Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceMbr()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSliceMbr>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.GetSiteSliceMbrPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceMbr>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/mbr Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceMbr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSliceMbr> {

    return this.getSiteSliceMbr$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceMbr>) => r.body as SiteSliceMbr)
    );
  }

  /**
   * Path part for operation postSiteSliceMbr
   */
  static readonly PostSiteSliceMbrPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr';

  /**
   * POST /site/{site-id}/slice/{slice-id}/mbr.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSiteSliceMbr()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteSliceMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
    body?: SiteSliceMbr
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.PostSiteSliceMbrPath, 'post');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /site/{site-id}/slice/{slice-id}/mbr.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSiteSliceMbr$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteSliceMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
    body?: SiteSliceMbr
  }): Observable<void> {

    return this.postSiteSliceMbr$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSiteSliceMbr
   */
  static readonly DeleteSiteSliceMbrPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr';

  /**
   * DELETE /site/{site-id}/slice/{slice-id}/mbr.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSiteSliceMbr()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteSliceMbr$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.DeleteSiteSliceMbrPath, 'delete');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /site/{site-id}/slice/{slice-id}/mbr.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSiteSliceMbr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteSliceMbr(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<void> {

    return this.deleteSiteSliceMbr$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation getSiteSliceXapp
   */
  static readonly GetSiteSliceXappPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/xapp';

  /**
   * GET /site/{site-id}/slice/{slice-id}/xapp Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceXapp()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceXapp$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSliceXapp>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.GetSiteSliceXappPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceXapp>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/xapp Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceXapp$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceXapp(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSliceXapp> {

    return this.getSiteSliceXapp$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceXapp>) => r.body as SiteSliceXapp)
    );
  }

  /**
   * Path part for operation postSiteSliceXapp
   */
  static readonly PostSiteSliceXappPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/xapp';

  /**
   * POST /site/{site-id}/slice/{slice-id}/xapp.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSiteSliceXapp()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteSliceXapp$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
    body?: SiteSliceXapp
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.PostSiteSliceXappPath, 'post');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /site/{site-id}/slice/{slice-id}/xapp.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSiteSliceXapp$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteSliceXapp(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
    body?: SiteSliceXapp
  }): Observable<void> {

    return this.postSiteSliceXapp$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSiteSliceXapp
   */
  static readonly DeleteSiteSliceXappPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/xapp';

  /**
   * DELETE /site/{site-id}/slice/{slice-id}/xapp.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSiteSliceXapp()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteSliceXapp$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteSliceService.DeleteSiteSliceXappPath, 'delete');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /site/{site-id}/slice/{slice-id}/xapp.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSiteSliceXapp$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteSliceXapp(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<void> {

    return this.deleteSiteSliceXapp$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

}
