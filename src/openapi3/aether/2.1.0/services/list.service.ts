// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { ApplicationEndpointList } from '../models/application-endpoint-list';
import { ApplicationList } from '../models/application-list';
import { SiteDeviceGroupDeviceList } from '../models/site-device-group-device-list';
import { SiteDeviceGroupList } from '../models/site-device-group-list';
import { SiteDeviceList } from '../models/site-device-list';
import { SiteIpDomainList } from '../models/site-ip-domain-list';
import { SiteList } from '../models/site-list';
import { SiteMonitoringEdgeDeviceList } from '../models/site-monitoring-edge-device-list';
import { SiteSimCardList } from '../models/site-sim-card-list';
import { SiteSliceDeviceGroupList } from '../models/site-slice-device-group-list';
import { SiteSliceFilterList } from '../models/site-slice-filter-list';
import { SiteSliceList } from '../models/site-slice-list';
import { SiteSlicePriorityTrafficRuleList } from '../models/site-slice-priority-traffic-rule-list';
import { SiteSmallCellList } from '../models/site-small-cell-list';
import { SiteUpfList } from '../models/site-upf-list';
import { TemplateList } from '../models/template-list';
import { TrafficClassList } from '../models/traffic-class-list';

@Injectable({
  providedIn: 'root',
})
export class ListService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getApplicationList
   */
  static readonly GetApplicationListPath = '/aether/v2.1.x/{enterprise-id}/application';

  /**
   * GET /application List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplicationList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<StrictHttpResponse<ApplicationList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetApplicationListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<ApplicationList>;
      })
    );
  }

  /**
   * GET /application List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getApplicationList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<ApplicationList> {

    return this.getApplicationList$Response(params).pipe(
      map((r: StrictHttpResponse<ApplicationList>) => r.body as ApplicationList)
    );
  }

  /**
   * Path part for operation getApplicationEndpointList
   */
  static readonly GetApplicationEndpointListPath = '/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint';

  /**
   * GET /application/{application-id}/endpoint List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApplicationEndpointList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationEndpointList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;
  }): Observable<StrictHttpResponse<ApplicationEndpointList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetApplicationEndpointListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('application-id', params['application-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<ApplicationEndpointList>;
      })
    );
  }

  /**
   * GET /application/{application-id}/endpoint List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getApplicationEndpointList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApplicationEndpointList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {application-id}
     */
    'application-id': any;
  }): Observable<ApplicationEndpointList> {

    return this.getApplicationEndpointList$Response(params).pipe(
      map((r: StrictHttpResponse<ApplicationEndpointList>) => r.body as ApplicationEndpointList)
    );
  }

  /**
   * Path part for operation getSiteList
   */
  static readonly GetSiteListPath = '/aether/v2.1.x/{enterprise-id}/site';

  /**
   * GET /site List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<StrictHttpResponse<SiteList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteList>;
      })
    );
  }

  /**
   * GET /site List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<SiteList> {

    return this.getSiteList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteList>) => r.body as SiteList)
    );
  }

  /**
   * Path part for operation getSiteDeviceList
   */
  static readonly GetSiteDeviceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device';

  /**
   * GET /site/{site-id}/device List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteDeviceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteDeviceList> {

    return this.getSiteDeviceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceList>) => r.body as SiteDeviceList)
    );
  }

  /**
   * Path part for operation getSiteDeviceGroupList
   */
  static readonly GetSiteDeviceGroupListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group';

  /**
   * GET /site/{site-id}/device-group List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroupList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroupList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteDeviceGroupListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroupList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroupList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteDeviceGroupList> {

    return this.getSiteDeviceGroupList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroupList>) => r.body as SiteDeviceGroupList)
    );
  }

  /**
   * Path part for operation getSiteDeviceGroupDeviceList
   */
  static readonly GetSiteDeviceGroupDeviceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device';

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroupDeviceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDeviceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroupDeviceList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteDeviceGroupDeviceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroupDeviceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroupDeviceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDeviceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<SiteDeviceGroupDeviceList> {

    return this.getSiteDeviceGroupDeviceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroupDeviceList>) => r.body as SiteDeviceGroupDeviceList)
    );
  }

  /**
   * Path part for operation getSiteIpDomainList
   */
  static readonly GetSiteIpDomainListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain';

  /**
   * GET /site/{site-id}/ip-domain List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteIpDomainList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteIpDomainList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteIpDomainList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteIpDomainListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteIpDomainList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/ip-domain List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteIpDomainList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteIpDomainList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteIpDomainList> {

    return this.getSiteIpDomainList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteIpDomainList>) => r.body as SiteIpDomainList)
    );
  }

  /**
   * Path part for operation getSiteMonitoringEdgeDeviceList
   */
  static readonly GetSiteMonitoringEdgeDeviceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device';

  /**
   * GET /site/{site-id}/monitoring/edge-device List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteMonitoringEdgeDeviceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoringEdgeDeviceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteMonitoringEdgeDeviceList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteMonitoringEdgeDeviceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteMonitoringEdgeDeviceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/monitoring/edge-device List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteMonitoringEdgeDeviceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteMonitoringEdgeDeviceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteMonitoringEdgeDeviceList> {

    return this.getSiteMonitoringEdgeDeviceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteMonitoringEdgeDeviceList>) => r.body as SiteMonitoringEdgeDeviceList)
    );
  }

  /**
   * Path part for operation getSiteSimCardList
   */
  static readonly GetSiteSimCardListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card';

  /**
   * GET /site/{site-id}/sim-card List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSimCardList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSimCardList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteSimCardList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteSimCardListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSimCardList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/sim-card List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSimCardList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSimCardList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteSimCardList> {

    return this.getSiteSimCardList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSimCardList>) => r.body as SiteSimCardList)
    );
  }

  /**
   * Path part for operation getSiteSliceList
   */
  static readonly GetSiteSliceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice';

  /**
   * GET /site/{site-id}/slice List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteSliceList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteSliceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteSliceList> {

    return this.getSiteSliceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceList>) => r.body as SiteSliceList)
    );
  }

  /**
   * Path part for operation getSiteSliceDeviceGroupList
   */
  static readonly GetSiteSliceDeviceGroupListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group';

  /**
   * GET /site/{site-id}/slice/{slice-id}/device-group List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceDeviceGroupList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceDeviceGroupList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSliceDeviceGroupList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteSliceDeviceGroupListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceDeviceGroupList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/device-group List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceDeviceGroupList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceDeviceGroupList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSliceDeviceGroupList> {

    return this.getSiteSliceDeviceGroupList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceDeviceGroupList>) => r.body as SiteSliceDeviceGroupList)
    );
  }

  /**
   * Path part for operation getSiteSliceFilterList
   */
  static readonly GetSiteSliceFilterListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter';

  /**
   * GET /site/{site-id}/slice/{slice-id}/filter List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSliceFilterList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceFilterList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSliceFilterList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteSliceFilterListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSliceFilterList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/filter List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSliceFilterList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSliceFilterList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSliceFilterList> {

    return this.getSiteSliceFilterList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSliceFilterList>) => r.body as SiteSliceFilterList)
    );
  }

  /**
   * Path part for operation getSiteSlicePriorityTrafficRuleList
   */
  static readonly GetSiteSlicePriorityTrafficRuleListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule';

  /**
   * GET /site/{site-id}/slice/{slice-id}/priority-traffic-rule List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSlicePriorityTrafficRuleList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlicePriorityTrafficRuleList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<StrictHttpResponse<SiteSlicePriorityTrafficRuleList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteSlicePriorityTrafficRuleListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('slice-id', params['slice-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSlicePriorityTrafficRuleList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/slice/{slice-id}/priority-traffic-rule List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSlicePriorityTrafficRuleList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSlicePriorityTrafficRuleList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {slice-id}
     */
    'slice-id': any;
  }): Observable<SiteSlicePriorityTrafficRuleList> {

    return this.getSiteSlicePriorityTrafficRuleList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSlicePriorityTrafficRuleList>) => r.body as SiteSlicePriorityTrafficRuleList)
    );
  }

  /**
   * Path part for operation getSiteSmallCellList
   */
  static readonly GetSiteSmallCellListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell';

  /**
   * GET /site/{site-id}/small-cell List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteSmallCellList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSmallCellList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteSmallCellList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteSmallCellListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteSmallCellList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/small-cell List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteSmallCellList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteSmallCellList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteSmallCellList> {

    return this.getSiteSmallCellList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteSmallCellList>) => r.body as SiteSmallCellList)
    );
  }

  /**
   * Path part for operation getSiteUpfList
   */
  static readonly GetSiteUpfListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf';

  /**
   * GET /site/{site-id}/upf List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteUpfList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteUpfList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteUpfList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSiteUpfListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteUpfList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/upf List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteUpfList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteUpfList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteUpfList> {

    return this.getSiteUpfList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteUpfList>) => r.body as SiteUpfList)
    );
  }

  /**
   * Path part for operation getTemplateList
   */
  static readonly GetTemplateListPath = '/aether/v2.1.x/{enterprise-id}/template';

  /**
   * GET /template List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTemplateList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTemplateList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<StrictHttpResponse<TemplateList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetTemplateListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<TemplateList>;
      })
    );
  }

  /**
   * GET /template List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTemplateList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTemplateList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<TemplateList> {

    return this.getTemplateList$Response(params).pipe(
      map((r: StrictHttpResponse<TemplateList>) => r.body as TemplateList)
    );
  }

  /**
   * Path part for operation getTrafficClassList
   */
  static readonly GetTrafficClassListPath = '/aether/v2.1.x/{enterprise-id}/traffic-class';

  /**
   * GET /traffic-class List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrafficClassList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClassList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<StrictHttpResponse<TrafficClassList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetTrafficClassListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<TrafficClassList>;
      })
    );
  }

  /**
   * GET /traffic-class List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getTrafficClassList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrafficClassList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;
  }): Observable<TrafficClassList> {

    return this.getTrafficClassList$Response(params).pipe(
      map((r: StrictHttpResponse<TrafficClassList>) => r.body as TrafficClassList)
    );
  }

}
