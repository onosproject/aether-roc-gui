// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { SiteDeviceGroupDevice } from '../models/site-device-group-device';
import { SiteDeviceGroupDeviceList } from '../models/site-device-group-device-list';

@Injectable({
  providedIn: 'root',
})
export class SiteDeviceGroupDeviceService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getSiteDeviceGroupDeviceList
   */
  static readonly GetSiteDeviceGroupDeviceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device';

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroupDeviceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDeviceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroupDeviceList>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceGroupDeviceService.GetSiteDeviceGroupDeviceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroupDeviceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroupDeviceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDeviceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;
  }): Observable<SiteDeviceGroupDeviceList> {

    return this.getSiteDeviceGroupDeviceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroupDeviceList>) => r.body as SiteDeviceGroupDeviceList)
    );
  }

  /**
   * Path part for operation getSiteDeviceGroupDevice
   */
  static readonly GetSiteDeviceGroupDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}';

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceGroupDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceGroupDevice>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceGroupDeviceService.GetSiteDeviceGroupDevicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceGroupDevice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device-group/{device-group-id}/device Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceGroupDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceGroupDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<SiteDeviceGroupDevice> {

    return this.getSiteDeviceGroupDevice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceGroupDevice>) => r.body as SiteDeviceGroupDevice)
    );
  }

  /**
   * Path part for operation postSiteDeviceGroupDevice
   */
  static readonly PostSiteDeviceGroupDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}';

  /**
   * POST /site/{site-id}/device-group/{device-group-id}/device.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSiteDeviceGroupDevice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteDeviceGroupDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
    body?: SiteDeviceGroupDevice
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceGroupDeviceService.PostSiteDeviceGroupDevicePath, 'post');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
      rb.path('device-id', params['device-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /site/{site-id}/device-group/{device-group-id}/device.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSiteDeviceGroupDevice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteDeviceGroupDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
    body?: SiteDeviceGroupDevice
  }): Observable<void> {

    return this.postSiteDeviceGroupDevice$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSiteDeviceGroupDevice
   */
  static readonly DeleteSiteDeviceGroupDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}';

  /**
   * DELETE /site/{site-id}/device-group/{device-group-id}/device.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSiteDeviceGroupDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteDeviceGroupDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceGroupDeviceService.DeleteSiteDeviceGroupDevicePath, 'delete');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-group-id', params['device-group-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /site/{site-id}/device-group/{device-group-id}/device.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSiteDeviceGroupDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteDeviceGroupDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-group-id}
     */
    'device-group-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<void> {

    return this.deleteSiteDeviceGroupDevice$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

}
