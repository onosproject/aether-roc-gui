// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { SiteDevice } from '../models/site-device';
import { SiteDeviceList } from '../models/site-device-list';
import { SiteDeviceState } from '../models/site-device-state';

@Injectable({
  providedIn: 'root',
})
export class SiteDeviceService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getSiteDeviceList
   */
  static readonly GetSiteDeviceListPath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device';

  /**
   * GET /site/{site-id}/device List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceList$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceList>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceService.GetSiteDeviceListPath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceList>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceList(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;
  }): Observable<SiteDeviceList> {

    return this.getSiteDeviceList$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceList>) => r.body as SiteDeviceList)
    );
  }

  /**
   * Path part for operation getSiteDevice
   */
  static readonly GetSiteDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}';

  /**
   * GET /site/{site-id}/device Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<SiteDevice>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceService.GetSiteDevicePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDevice>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<SiteDevice> {

    return this.getSiteDevice$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDevice>) => r.body as SiteDevice)
    );
  }

  /**
   * Path part for operation postSiteDevice
   */
  static readonly PostSiteDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}';

  /**
   * POST /site/{site-id}/device.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSiteDevice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
    body?: SiteDevice
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceService.PostSiteDevicePath, 'post');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-id', params['device-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /site/{site-id}/device.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSiteDevice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSiteDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
    body?: SiteDevice
  }): Observable<void> {

    return this.postSiteDevice$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSiteDevice
   */
  static readonly DeleteSiteDevicePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}';

  /**
   * DELETE /site/{site-id}/device.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSiteDevice()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteDevice$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceService.DeleteSiteDevicePath, 'delete');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /site/{site-id}/device.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSiteDevice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSiteDevice(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<void> {

    return this.deleteSiteDevice$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation getSiteDeviceState
   */
  static readonly GetSiteDeviceStatePath = '/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}/state';

  /**
   * GET /site/{site-id}/device/{device-id}/state Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSiteDeviceState()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceState$Response(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<StrictHttpResponse<SiteDeviceState>> {

    const rb = new RequestBuilder(this.rootUrl, SiteDeviceService.GetSiteDeviceStatePath, 'get');
    if (params) {
      rb.path('enterprise-id', params['enterprise-id'], {});
      rb.path('site-id', params['site-id'], {});
      rb.path('device-id', params['device-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SiteDeviceState>;
      })
    );
  }

  /**
   * GET /site/{site-id}/device/{device-id}/state Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSiteDeviceState$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSiteDeviceState(params: {

    /**
     * enterprise-id (target in onos-config)
     */
    'enterprise-id': any;

    /**
     * key {site-id}
     */
    'site-id': any;

    /**
     * key {device-id}
     */
    'device-id': any;
  }): Observable<SiteDeviceState> {

    return this.getSiteDeviceState$Response(params).pipe(
      map((r: StrictHttpResponse<SiteDeviceState>) => r.body as SiteDeviceState)
    );
  }

}
