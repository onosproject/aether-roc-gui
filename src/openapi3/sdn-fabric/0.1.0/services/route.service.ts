// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { Route } from '../models/route';
import { RouteList } from '../models/route-list';

@Injectable({
  providedIn: 'root',
})
export class RouteService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getRouteList
   */
  static readonly GetRouteListPath = '/sdn-fabric/v0.1.x/{fabric-id}/route';

  /**
   * GET /route List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRouteList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRouteList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<RouteList>> {

    const rb = new RequestBuilder(this.rootUrl, RouteService.GetRouteListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<RouteList>;
      })
    );
  }

  /**
   * GET /route List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getRouteList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRouteList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<RouteList> {

    return this.getRouteList$Response(params).pipe(
      map((r: StrictHttpResponse<RouteList>) => r.body as RouteList)
    );
  }

  /**
   * Path part for operation getRoute
   */
  static readonly GetRoutePath = '/sdn-fabric/v0.1.x/{fabric-id}/route/{route-id}';

  /**
   * GET /route Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoute()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {route-id}
     */
    'route-id': any;
  }): Observable<StrictHttpResponse<Route>> {

    const rb = new RequestBuilder(this.rootUrl, RouteService.GetRoutePath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('route-id', params['route-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<Route>;
      })
    );
  }

  /**
   * GET /route Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getRoute$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {route-id}
     */
    'route-id': any;
  }): Observable<Route> {

    return this.getRoute$Response(params).pipe(
      map((r: StrictHttpResponse<Route>) => r.body as Route)
    );
  }

}
