// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { DhcpServerList } from '../models/dhcp-server-list';
import { RouteList } from '../models/route-list';
import { SwitchModelAttributeList } from '../models/switch-model-attribute-list';
import { SwitchModelList } from '../models/switch-model-list';
import { SwitchModelPortList } from '../models/switch-model-port-list';
import { SwitchAttributeList } from '../models/switch-attribute-list';
import { SwitchList } from '../models/switch-list';
import { SwitchPortList } from '../models/switch-port-list';
import { SwitchSwitchPairPairingPortList } from '../models/switch-switch-pair-pairing-port-list';
import { SwitchVlanList } from '../models/switch-vlan-list';

@Injectable({
  providedIn: 'root',
})
export class ListService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getDhcpServerList
   */
  static readonly GetDhcpServerListPath = '/sdn-fabric/v0.1.x/{fabric-id}/dhcp-server';

  /**
   * GET /dhcp-server List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDhcpServerList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDhcpServerList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<DhcpServerList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetDhcpServerListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<DhcpServerList>;
      })
    );
  }

  /**
   * GET /dhcp-server List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getDhcpServerList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDhcpServerList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<DhcpServerList> {

    return this.getDhcpServerList$Response(params).pipe(
      map((r: StrictHttpResponse<DhcpServerList>) => r.body as DhcpServerList)
    );
  }

  /**
   * Path part for operation getRouteList
   */
  static readonly GetRouteListPath = '/sdn-fabric/v0.1.x/{fabric-id}/route';

  /**
   * GET /route List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRouteList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRouteList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<RouteList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetRouteListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<RouteList>;
      })
    );
  }

  /**
   * GET /route List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getRouteList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRouteList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<RouteList> {

    return this.getRouteList$Response(params).pipe(
      map((r: StrictHttpResponse<RouteList>) => r.body as RouteList)
    );
  }

  /**
   * Path part for operation getSwitchList
   */
  static readonly GetSwitchListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch';

  /**
   * GET /switch List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<SwitchList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchList>;
      })
    );
  }

  /**
   * GET /switch List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<SwitchList> {

    return this.getSwitchList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchList>) => r.body as SwitchList)
    );
  }

  /**
   * Path part for operation getSwitchModelList
   */
  static readonly GetSwitchModelListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model';

  /**
   * GET /switch-model List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchModelList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<SwitchModelList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchModelListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchModelList>;
      })
    );
  }

  /**
   * GET /switch-model List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchModelList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<SwitchModelList> {

    return this.getSwitchModelList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchModelList>) => r.body as SwitchModelList)
    );
  }

  /**
   * Path part for operation getSwitchModelAttributeList
   */
  static readonly GetSwitchModelAttributeListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute';

  /**
   * GET /switch-model/{switch-model-id}/attribute List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchModelAttributeList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelAttributeList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<StrictHttpResponse<SwitchModelAttributeList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchModelAttributeListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchModelAttributeList>;
      })
    );
  }

  /**
   * GET /switch-model/{switch-model-id}/attribute List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchModelAttributeList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelAttributeList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<SwitchModelAttributeList> {

    return this.getSwitchModelAttributeList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchModelAttributeList>) => r.body as SwitchModelAttributeList)
    );
  }

  /**
   * Path part for operation getSwitchModelPortList
   */
  static readonly GetSwitchModelPortListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port';

  /**
   * GET /switch-model/{switch-model-id}/port List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchModelPortList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelPortList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<StrictHttpResponse<SwitchModelPortList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchModelPortListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchModelPortList>;
      })
    );
  }

  /**
   * GET /switch-model/{switch-model-id}/port List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchModelPortList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelPortList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<SwitchModelPortList> {

    return this.getSwitchModelPortList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchModelPortList>) => r.body as SwitchModelPortList)
    );
  }

  /**
   * Path part for operation getSwitchAttributeList
   */
  static readonly GetSwitchAttributeListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute';

  /**
   * GET /switch/{switch-id}/attribute List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchAttributeList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchAttributeList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchAttributeList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchAttributeListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchAttributeList>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/attribute List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchAttributeList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchAttributeList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchAttributeList> {

    return this.getSwitchAttributeList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchAttributeList>) => r.body as SwitchAttributeList)
    );
  }

  /**
   * Path part for operation getSwitchPortList
   */
  static readonly GetSwitchPortListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port';

  /**
   * GET /switch/{switch-id}/port List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchPortList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchPortList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchPortList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchPortListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchPortList>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/port List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchPortList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchPortList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchPortList> {

    return this.getSwitchPortList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchPortList>) => r.body as SwitchPortList)
    );
  }

  /**
   * Path part for operation getSwitchSwitchPairPairingPortList
   */
  static readonly GetSwitchSwitchPairPairingPortListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port';

  /**
   * GET /switch/{switch-id}/switch-pair/pairing-port List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchSwitchPairPairingPortList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchSwitchPairPairingPortList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchSwitchPairPairingPortList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchSwitchPairPairingPortListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchSwitchPairPairingPortList>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/switch-pair/pairing-port List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchSwitchPairPairingPortList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchSwitchPairPairingPortList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchSwitchPairPairingPortList> {

    return this.getSwitchSwitchPairPairingPortList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchSwitchPairPairingPortList>) => r.body as SwitchSwitchPairPairingPortList)
    );
  }

  /**
   * Path part for operation getSwitchVlanList
   */
  static readonly GetSwitchVlanListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan';

  /**
   * GET /switch/{switch-id}/vlan List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchVlanList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchVlanList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchVlanList>> {

    const rb = new RequestBuilder(this.rootUrl, ListService.GetSwitchVlanListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchVlanList>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/vlan List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchVlanList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchVlanList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchVlanList> {

    return this.getSwitchVlanList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchVlanList>) => r.body as SwitchVlanList)
    );
  }

}
