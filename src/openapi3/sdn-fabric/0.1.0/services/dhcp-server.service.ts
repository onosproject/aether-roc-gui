// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { DhcpServer } from '../models/dhcp-server';
import { DhcpServerList } from '../models/dhcp-server-list';

@Injectable({
  providedIn: 'root',
})
export class DhcpServerService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getDhcpServerList
   */
  static readonly GetDhcpServerListPath = '/sdn-fabric/v0.1.x/{fabric-id}/dhcp-server';

  /**
   * GET /dhcp-server List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDhcpServerList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDhcpServerList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<DhcpServerList>> {

    const rb = new RequestBuilder(this.rootUrl, DhcpServerService.GetDhcpServerListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<DhcpServerList>;
      })
    );
  }

  /**
   * GET /dhcp-server List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getDhcpServerList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDhcpServerList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<DhcpServerList> {

    return this.getDhcpServerList$Response(params).pipe(
      map((r: StrictHttpResponse<DhcpServerList>) => r.body as DhcpServerList)
    );
  }

  /**
   * Path part for operation getDhcpServer
   */
  static readonly GetDhcpServerPath = '/sdn-fabric/v0.1.x/{fabric-id}/dhcp-server/{dhcp-id}';

  /**
   * GET /dhcp-server Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDhcpServer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDhcpServer$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {dhcp-id}
     */
    'dhcp-id': any;
  }): Observable<StrictHttpResponse<DhcpServer>> {

    const rb = new RequestBuilder(this.rootUrl, DhcpServerService.GetDhcpServerPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('dhcp-id', params['dhcp-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<DhcpServer>;
      })
    );
  }

  /**
   * GET /dhcp-server Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getDhcpServer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDhcpServer(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {dhcp-id}
     */
    'dhcp-id': any;
  }): Observable<DhcpServer> {

    return this.getDhcpServer$Response(params).pipe(
      map((r: StrictHttpResponse<DhcpServer>) => r.body as DhcpServer)
    );
  }

}
