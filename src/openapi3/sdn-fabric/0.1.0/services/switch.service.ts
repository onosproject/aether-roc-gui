// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { Switch } from '../models/switch';
import { SwitchList } from '../models/switch-list';
import { SwitchManagement } from '../models/switch-management';
import { SwitchState } from '../models/switch-state';
import { SwitchSwitchPair } from '../models/switch-switch-pair';

@Injectable({
  providedIn: 'root',
})
export class SwitchService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getSwitchList
   */
  static readonly GetSwitchListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch';

  /**
   * GET /switch List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<StrictHttpResponse<SwitchList>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchService.GetSwitchListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchList>;
      })
    );
  }

  /**
   * GET /switch List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;
  }): Observable<SwitchList> {

    return this.getSwitchList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchList>) => r.body as SwitchList)
    );
  }

  /**
   * Path part for operation getSwitch
   */
  static readonly GetSwitchPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}';

  /**
   * GET /switch Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitch()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitch$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<Switch>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchService.GetSwitchPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<Switch>;
      })
    );
  }

  /**
   * GET /switch Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitch(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<Switch> {

    return this.getSwitch$Response(params).pipe(
      map((r: StrictHttpResponse<Switch>) => r.body as Switch)
    );
  }

  /**
   * Path part for operation getSwitchManagement
   */
  static readonly GetSwitchManagementPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/management';

  /**
   * GET /switch/{switch-id}/management Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchManagement()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchManagement$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchManagement>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchService.GetSwitchManagementPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchManagement>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/management Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchManagement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchManagement(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchManagement> {

    return this.getSwitchManagement$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchManagement>) => r.body as SwitchManagement)
    );
  }

  /**
   * Path part for operation getSwitchState
   */
  static readonly GetSwitchStatePath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/state';

  /**
   * GET /switch/{switch-id}/state Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchState()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchState$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchState>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchService.GetSwitchStatePath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchState>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/state Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchState$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchState(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchState> {

    return this.getSwitchState$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchState>) => r.body as SwitchState)
    );
  }

  /**
   * Path part for operation getSwitchSwitchPair
   */
  static readonly GetSwitchSwitchPairPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair';

  /**
   * GET /switch/{switch-id}/switch-pair Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchSwitchPair()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchSwitchPair$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<SwitchSwitchPair>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchService.GetSwitchSwitchPairPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchSwitchPair>;
      })
    );
  }

  /**
   * GET /switch/{switch-id}/switch-pair Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchSwitchPair$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchSwitchPair(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<SwitchSwitchPair> {

    return this.getSwitchSwitchPair$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchSwitchPair>) => r.body as SwitchSwitchPair)
    );
  }

}
