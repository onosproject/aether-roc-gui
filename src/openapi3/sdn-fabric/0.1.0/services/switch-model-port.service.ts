// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { SwitchModelPort } from '../models/switch-model-port';
import { SwitchModelPortList } from '../models/switch-model-port-list';

@Injectable({
  providedIn: 'root',
})
export class SwitchModelPortService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getSwitchModelPortList
   */
  static readonly GetSwitchModelPortListPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port';

  /**
   * GET /switch-model/{switch-model-id}/port List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchModelPortList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelPortList$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<StrictHttpResponse<SwitchModelPortList>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchModelPortService.GetSwitchModelPortListPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchModelPortList>;
      })
    );
  }

  /**
   * GET /switch-model/{switch-model-id}/port List.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchModelPortList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelPortList(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<SwitchModelPortList> {

    return this.getSwitchModelPortList$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchModelPortList>) => r.body as SwitchModelPortList)
    );
  }

  /**
   * Path part for operation getSwitchModelPort
   */
  static readonly GetSwitchModelPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}';

  /**
   * GET /switch-model/{switch-model-id}/port Container.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSwitchModelPort()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<StrictHttpResponse<SwitchModelPort>> {

    const rb = new RequestBuilder(this.rootUrl, SwitchModelPortService.GetSwitchModelPortPath, 'get');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<SwitchModelPort>;
      })
    );
  }

  /**
   * GET /switch-model/{switch-model-id}/port Container.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getSwitchModelPort$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSwitchModelPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<SwitchModelPort> {

    return this.getSwitchModelPort$Response(params).pipe(
      map((r: StrictHttpResponse<SwitchModelPort>) => r.body as SwitchModelPort)
    );
  }

}
