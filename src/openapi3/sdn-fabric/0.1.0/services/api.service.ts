// Code generated by openapi-gen. DO NOT EDIT.
/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { DhcpServer } from '../models/dhcp-server';
import { Route } from '../models/route';
import { Switch } from '../models/switch';
import { SwitchModel } from '../models/switch-model';
import { SwitchModelAttribute } from '../models/switch-model-attribute';
import { SwitchModelPort } from '../models/switch-model-port';
import { SwitchAttribute } from '../models/switch-attribute';
import { SwitchManagement } from '../models/switch-management';
import { SwitchPort } from '../models/switch-port';
import { SwitchPortVlans } from '../models/switch-port-vlans';
import { SwitchSwitchPair } from '../models/switch-switch-pair';
import { SwitchSwitchPairPairingPort } from '../models/switch-switch-pair-pairing-port';
import { SwitchVlan } from '../models/switch-vlan';

@Injectable({
  providedIn: 'root',
})
export class ApiService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation postDhcpServer
   */
  static readonly PostDhcpServerPath = '/sdn-fabric/v0.1.x/{fabric-id}/dhcp-server/{dhcp-server-id}';

  /**
   * POST /dhcp-server.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postDhcpServer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postDhcpServer$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {dhcp-server-id}
     */
    'dhcp-server-id': any;
    body?: DhcpServer
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostDhcpServerPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('dhcp-server-id', params['dhcp-server-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /dhcp-server.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postDhcpServer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postDhcpServer(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {dhcp-server-id}
     */
    'dhcp-server-id': any;
    body?: DhcpServer
  }): Observable<void> {

    return this.postDhcpServer$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteDhcpServer
   */
  static readonly DeleteDhcpServerPath = '/sdn-fabric/v0.1.x/{fabric-id}/dhcp-server/{dhcp-server-id}';

  /**
   * DELETE /dhcp-server.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDhcpServer()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDhcpServer$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {dhcp-server-id}
     */
    'dhcp-server-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteDhcpServerPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('dhcp-server-id', params['dhcp-server-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /dhcp-server.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteDhcpServer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDhcpServer(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {dhcp-server-id}
     */
    'dhcp-server-id': any;
  }): Observable<void> {

    return this.deleteDhcpServer$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postRoute
   */
  static readonly PostRoutePath = '/sdn-fabric/v0.1.x/{fabric-id}/route/{route-id}';

  /**
   * POST /route.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postRoute()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postRoute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {route-id}
     */
    'route-id': any;
    body?: Route
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostRoutePath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('route-id', params['route-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /route.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postRoute$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postRoute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {route-id}
     */
    'route-id': any;
    body?: Route
  }): Observable<void> {

    return this.postRoute$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteRoute
   */
  static readonly DeleteRoutePath = '/sdn-fabric/v0.1.x/{fabric-id}/route/{route-id}';

  /**
   * DELETE /route.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRoute()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {route-id}
     */
    'route-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteRoutePath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('route-id', params['route-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /route.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteRoute$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {route-id}
     */
    'route-id': any;
  }): Observable<void> {

    return this.deleteRoute$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchModel
   */
  static readonly PostSwitchModelPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}';

  /**
   * POST /switch-model.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchModel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchModel$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
    body?: SwitchModel
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchModelPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch-model.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchModel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchModel(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
    body?: SwitchModel
  }): Observable<void> {

    return this.postSwitchModel$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchModel
   */
  static readonly DeleteSwitchModelPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}';

  /**
   * DELETE /switch-model.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchModel()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchModel$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchModelPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch-model.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchModel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchModel(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;
  }): Observable<void> {

    return this.deleteSwitchModel$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchModelAttribute
   */
  static readonly PostSwitchModelAttributePath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}';

  /**
   * POST /switch-model/{switch-model-id}/attribute.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchModelAttribute()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchModelAttribute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
    body?: SwitchModelAttribute
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchModelAttributePath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
      rb.path('attribute-key', params['attribute-key'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch-model/{switch-model-id}/attribute.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchModelAttribute$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchModelAttribute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
    body?: SwitchModelAttribute
  }): Observable<void> {

    return this.postSwitchModelAttribute$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchModelAttribute
   */
  static readonly DeleteSwitchModelAttributePath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}';

  /**
   * DELETE /switch-model/{switch-model-id}/attribute.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchModelAttribute()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchModelAttribute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchModelAttributePath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
      rb.path('attribute-key', params['attribute-key'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch-model/{switch-model-id}/attribute.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchModelAttribute$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchModelAttribute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
  }): Observable<void> {

    return this.deleteSwitchModelAttribute$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchModelPort
   */
  static readonly PostSwitchModelPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}';

  /**
   * POST /switch-model/{switch-model-id}/port.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchModelPort()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchModelPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;
    body?: SwitchModelPort
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchModelPortPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch-model/{switch-model-id}/port.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchModelPort$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchModelPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;
    body?: SwitchModelPort
  }): Observable<void> {

    return this.postSwitchModelPort$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchModelPort
   */
  static readonly DeleteSwitchModelPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}';

  /**
   * DELETE /switch-model/{switch-model-id}/port.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchModelPort()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchModelPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchModelPortPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-model-id', params['switch-model-id'], {});
      rb.path('cage-number', params['cage-number'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch-model/{switch-model-id}/port.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchModelPort$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchModelPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-model-id}
     */
    'switch-model-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;
  }): Observable<void> {

    return this.deleteSwitchModelPort$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitch
   */
  static readonly PostSwitchPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}';

  /**
   * POST /switch.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitch$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
    body?: Switch
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitch(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
    body?: Switch
  }): Observable<void> {

    return this.postSwitch$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitch
   */
  static readonly DeleteSwitchPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}';

  /**
   * DELETE /switch.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitch()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitch$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitch(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<void> {

    return this.deleteSwitch$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchAttribute
   */
  static readonly PostSwitchAttributePath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}';

  /**
   * POST /switch/{switch-id}/attribute.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchAttribute()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchAttribute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
    body?: SwitchAttribute
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchAttributePath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('attribute-key', params['attribute-key'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/attribute.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchAttribute$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchAttribute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
    body?: SwitchAttribute
  }): Observable<void> {

    return this.postSwitchAttribute$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchAttribute
   */
  static readonly DeleteSwitchAttributePath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}';

  /**
   * DELETE /switch/{switch-id}/attribute.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchAttribute()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchAttribute$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchAttributePath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('attribute-key', params['attribute-key'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/attribute.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchAttribute$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchAttribute(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {attribute-key}
     */
    'attribute-key': any;
  }): Observable<void> {

    return this.deleteSwitchAttribute$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchManagement
   */
  static readonly PostSwitchManagementPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/management';

  /**
   * POST /switch/{switch-id}/management.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchManagement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchManagement$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
    body?: SwitchManagement
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchManagementPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/management.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchManagement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchManagement(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
    body?: SwitchManagement
  }): Observable<void> {

    return this.postSwitchManagement$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchManagement
   */
  static readonly DeleteSwitchManagementPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/management';

  /**
   * DELETE /switch/{switch-id}/management.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchManagement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchManagement$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchManagementPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/management.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchManagement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchManagement(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<void> {

    return this.deleteSwitchManagement$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchPort
   */
  static readonly PostSwitchPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}';

  /**
   * POST /switch/{switch-id}/port.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchPort()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
    body?: SwitchPort
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchPortPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/port.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchPort$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
    body?: SwitchPort
  }): Observable<void> {

    return this.postSwitchPort$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchPort
   */
  static readonly DeleteSwitchPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}';

  /**
   * DELETE /switch/{switch-id}/port.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchPort()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchPortPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/port.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchPort$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<void> {

    return this.deleteSwitchPort$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchPortVlans
   */
  static readonly PostSwitchPortVlansPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans';

  /**
   * POST /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchPortVlans()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchPortVlans$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
    body?: SwitchPortVlans
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchPortVlansPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchPortVlans$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchPortVlans(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
    body?: SwitchPortVlans
  }): Observable<void> {

    return this.postSwitchPortVlans$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchPortVlans
   */
  static readonly DeleteSwitchPortVlansPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans';

  /**
   * DELETE /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchPortVlans()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchPortVlans$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchPortVlansPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchPortVlans$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchPortVlans(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<void> {

    return this.deleteSwitchPortVlans$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchSwitchPair
   */
  static readonly PostSwitchSwitchPairPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair';

  /**
   * POST /switch/{switch-id}/switch-pair.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchSwitchPair()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchSwitchPair$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
    body?: SwitchSwitchPair
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchSwitchPairPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/switch-pair.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchSwitchPair$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchSwitchPair(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
    body?: SwitchSwitchPair
  }): Observable<void> {

    return this.postSwitchSwitchPair$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchSwitchPair
   */
  static readonly DeleteSwitchSwitchPairPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair';

  /**
   * DELETE /switch/{switch-id}/switch-pair.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchSwitchPair()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchSwitchPair$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchSwitchPairPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/switch-pair.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchSwitchPair$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchSwitchPair(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;
  }): Observable<void> {

    return this.deleteSwitchSwitchPair$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchSwitchPairPairingPort
   */
  static readonly PostSwitchSwitchPairPairingPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port/{cage-number}/{channel-number}';

  /**
   * POST /switch/{switch-id}/switch-pair/pairing-port.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchSwitchPairPairingPort()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchSwitchPairPairingPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
    body?: SwitchSwitchPairPairingPort
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchSwitchPairPairingPortPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/switch-pair/pairing-port.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchSwitchPairPairingPort$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchSwitchPairPairingPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
    body?: SwitchSwitchPairPairingPort
  }): Observable<void> {

    return this.postSwitchSwitchPairPairingPort$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchSwitchPairPairingPort
   */
  static readonly DeleteSwitchSwitchPairPairingPortPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port/{cage-number}/{channel-number}';

  /**
   * DELETE /switch/{switch-id}/switch-pair/pairing-port.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchSwitchPairPairingPort()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchSwitchPairPairingPort$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchSwitchPairPairingPortPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('cage-number', params['cage-number'], {});
      rb.path('channel-number', params['channel-number'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/switch-pair/pairing-port.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchSwitchPairPairingPort$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchSwitchPairPairingPort(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {cage-number}
     */
    'cage-number': any;

    /**
     * key {channel-number}
     */
    'channel-number': any;
  }): Observable<void> {

    return this.deleteSwitchSwitchPairPairingPort$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation postSwitchVlan
   */
  static readonly PostSwitchVlanPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}';

  /**
   * POST /switch/{switch-id}/vlan.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postSwitchVlan()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchVlan$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {vlan-id}
     */
    'vlan-id': any;
    body?: SwitchVlan
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.PostSwitchVlanPath, 'post');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('vlan-id', params['vlan-id'], {});
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * POST /switch/{switch-id}/vlan.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `postSwitchVlan$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postSwitchVlan(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {vlan-id}
     */
    'vlan-id': any;
    body?: SwitchVlan
  }): Observable<void> {

    return this.postSwitchVlan$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

  /**
   * Path part for operation deleteSwitchVlan
   */
  static readonly DeleteSwitchVlanPath = '/sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}';

  /**
   * DELETE /switch/{switch-id}/vlan.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSwitchVlan()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchVlan$Response(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {vlan-id}
     */
    'vlan-id': any;
  }): Observable<StrictHttpResponse<void>> {

    const rb = new RequestBuilder(this.rootUrl, ApiService.DeleteSwitchVlanPath, 'delete');
    if (params) {
      rb.path('fabric-id', params['fabric-id'], {});
      rb.path('switch-id', params['switch-id'], {});
      rb.path('vlan-id', params['vlan-id'], {});
    }

    return this.http.request(rb.build({
      responseType: 'text',
      accept: '*/*'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
      })
    );
  }

  /**
   * DELETE /switch/{switch-id}/vlan.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteSwitchVlan$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSwitchVlan(params: {

    /**
     * fabric-id (target in onos-config)
     */
    'fabric-id': any;

    /**
     * key {switch-id}
     */
    'switch-id': any;

    /**
     * key {vlan-id}
     */
    'vlan-id': any;
  }): Observable<void> {

    return this.deleteSwitchVlan$Response(params).pipe(
      map((r: StrictHttpResponse<void>) => r.body as void)
    );
  }

}
